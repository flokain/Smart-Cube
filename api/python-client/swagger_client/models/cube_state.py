# coding: utf-8

"""
    Smartcube API

    This APIis used to read and configure webhooks to be triggered by the sides of the cube  # noqa: E501

    OpenAPI spec version: v1
    Contact: flokain11@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CubeState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'side_id': 'SideId',
        'last_change': 'datetime'
    }

    attribute_map = {
        'side_id': 'sideId',
        'last_change': 'lastChange'
    }

    def __init__(self, side_id=None, last_change=None):  # noqa: E501
        """CubeState - a model defined in Swagger"""  # noqa: E501
        self._side_id = None
        self._last_change = None
        self.discriminator = None
        if side_id is not None:
            self.side_id = side_id
        if last_change is not None:
            self.last_change = last_change

    @property
    def side_id(self):
        """Gets the side_id of this CubeState.  # noqa: E501


        :return: The side_id of this CubeState.  # noqa: E501
        :rtype: SideId
        """
        return self._side_id

    @side_id.setter
    def side_id(self, side_id):
        """Sets the side_id of this CubeState.


        :param side_id: The side_id of this CubeState.  # noqa: E501
        :type: SideId
        """

        self._side_id = side_id

    @property
    def last_change(self):
        """Gets the last_change of this CubeState.  # noqa: E501


        :return: The last_change of this CubeState.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this CubeState.


        :param last_change: The last_change of this CubeState.  # noqa: E501
        :type: datetime
        """

        self._last_change = last_change

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CubeState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CubeState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
