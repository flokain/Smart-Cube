# coding: utf-8

"""
    Smartcube API

    This APIis used to read and configure webhooks to be triggered by the sides of the cube  # noqa: E501

    OpenAPI spec version: v1
    Contact: flokain11@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_remaining': 'int',
        'time_passed': 'int'
    }

    attribute_map = {
        'time_remaining': 'timeRemaining',
        'time_passed': 'timePassed'
    }

    def __init__(self, time_remaining=None, time_passed=None):  # noqa: E501
        """SystemState - a model defined in Swagger"""  # noqa: E501
        self._time_remaining = None
        self._time_passed = None
        self.discriminator = None
        if time_remaining is not None:
            self.time_remaining = time_remaining
        if time_passed is not None:
            self.time_passed = time_passed

    @property
    def time_remaining(self):
        """Gets the time_remaining of this SystemState.  # noqa: E501

        estimated remaining time of operation in seconds. -1 means infintely  # noqa: E501

        :return: The time_remaining of this SystemState.  # noqa: E501
        :rtype: int
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """Sets the time_remaining of this SystemState.

        estimated remaining time of operation in seconds. -1 means infintely  # noqa: E501

        :param time_remaining: The time_remaining of this SystemState.  # noqa: E501
        :type: int
        """

        self._time_remaining = time_remaining

    @property
    def time_passed(self):
        """Gets the time_passed of this SystemState.  # noqa: E501

        time that has passed since device was switched on  # noqa: E501

        :return: The time_passed of this SystemState.  # noqa: E501
        :rtype: int
        """
        return self._time_passed

    @time_passed.setter
    def time_passed(self, time_passed):
        """Sets the time_passed of this SystemState.

        time that has passed since device was switched on  # noqa: E501

        :param time_passed: The time_passed of this SystemState.  # noqa: E501
        :type: int
        """

        self._time_passed = time_passed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
