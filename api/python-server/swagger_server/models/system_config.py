# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SystemConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, wifi_ssid: str=None, change_delay: int=3000):  # noqa: E501
        """SystemConfig - a model defined in Swagger

        :param wifi_ssid: The wifi_ssid of this SystemConfig.  # noqa: E501
        :type wifi_ssid: str
        :param change_delay: The change_delay of this SystemConfig.  # noqa: E501
        :type change_delay: int
        """
        self.swagger_types = {
            'wifi_ssid': str,
            'change_delay': int
        }

        self.attribute_map = {
            'wifi_ssid': 'wifiSSID',
            'change_delay': 'changeDelay'
        }
        self._wifi_ssid = wifi_ssid
        self._change_delay = change_delay

    @classmethod
    def from_dict(cls, dikt) -> 'SystemConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SystemConfig of this SystemConfig.  # noqa: E501
        :rtype: SystemConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wifi_ssid(self) -> str:
        """Gets the wifi_ssid of this SystemConfig.

        the SSID of the connected Wifi  # noqa: E501

        :return: The wifi_ssid of this SystemConfig.
        :rtype: str
        """
        return self._wifi_ssid

    @wifi_ssid.setter
    def wifi_ssid(self, wifi_ssid: str):
        """Sets the wifi_ssid of this SystemConfig.

        the SSID of the connected Wifi  # noqa: E501

        :param wifi_ssid: The wifi_ssid of this SystemConfig.
        :type wifi_ssid: str
        """

        self._wifi_ssid = wifi_ssid

    @property
    def change_delay(self) -> int:
        """Gets the change_delay of this SystemConfig.

        when the cube is tilted, sensors indicate many CubeState changes. to mittigate the detection of those unwanted events after the cube is tilted it must stand still for milliseconds in changeDelay  # noqa: E501

        :return: The change_delay of this SystemConfig.
        :rtype: int
        """
        return self._change_delay

    @change_delay.setter
    def change_delay(self, change_delay: int):
        """Sets the change_delay of this SystemConfig.

        when the cube is tilted, sensors indicate many CubeState changes. to mittigate the detection of those unwanted events after the cube is tilted it must stand still for milliseconds in changeDelay  # noqa: E501

        :param change_delay: The change_delay of this SystemConfig.
        :type change_delay: int
        """

        self._change_delay = change_delay
