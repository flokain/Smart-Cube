{
  "openapi": "3.0.0",
  "info": {
    "title": "Smart-Cube API",
    "description": "This is the interactive Documentation of the REST API for the [Smart-Cube](https://github.com/flokain/Smart-Cube) project. Smart-Cube is a physical die, that sends http requests via its wifi connection when tilted. This API is the main interface to the device. It is used by the web frontend for device configuration. Other purposes are automating configuration, embeding it into an ecosystem of smart devices, or integrate it into another user interface. \n  <h1> Finding the Smart-Cubes Ip address </h1>\n\n  To interact with the a Smart-Cube you need to **verify that you are in the same network and now its IP address**. Also the network needs to allow the connection, which is not allways the case, since it is an inbound connection within the nework. Right after this section you can set the address of the smartcube, which will then configure the  interactive endpoint documentation below, so you can test the API on your cube directly!\n  <h2>Smart-Cube not reachable</h2>\n  \n  If for some reason you do not know the wifi Smart-Cube is connected to or the IP address it is using. You can always start the cube in **AccesPoint mode by shaking it for 5 seconds.** The cube will then create its own Wifi. Initialy this has the **SSID: Smart-Cube** and **password: Smart-Cube**, but it is recomemended to change this [here](#/System/put_system_config_accesspoint)\n  \n  <h2>AccessPoint not reachable</h2>\n  \n  If you cannot connect to the smart-cubes accesspoint for example you forgot your AccessPoint Password and do not have access to any previously configured wifi, you can **reset the cube by shaking it for 15 seconds**. For security reasons **all previous data will be deleted**. so use this as your last resort.\n  \n <h1>Authentication </h1> \n \n To use the API you need to authenticate via **HTTP Basic Authentication**. The initial credentials are **username: admin** and **password: Smart-Cube**. Those are the same credentials as for the webui, so if you have changed username and/or password there, be sure to use that. Use the green Authorize button on the right to login when experimenting with the API calls further down.\n  ",
    "contact": {
      "email": "flokain11@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "{protocol}://{ip}/api/v1",
      "description": "configure url to point to smartcube",
      "variables": {
        "ip": {
          "description": "ip or url of cube device. make sure to",
          "default": "192.168.0.156"
        },
        "protocol": {
          "description": "select secure https or unsecure http connection",
          "default": "http",
          "enum": [
            "http",
            "https"
          ]
        }
      }
    },
    {
      "url": "https://virtserver.swaggerhub.com/flokain/smartcube/1.0.0",
      "description": "mocking server that allways gives you a sampe response"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "Handlers",
      "description": "Events and Handlers are the core functionality of Smart-Cube. Here you get and configure handlers for [specific events](#/event-id) such as *cube is tilted to side 1* or *cube is being shaken*. Handlers are preconfigured http requests, that are sent when the event is detected."
    },
    {
      "name": "State",
      "description": "States can be used for informational purpose and as input for automation frameworks. State sources include *cube* which is sensoric-event based information, like the last detected event. *system* includes the operational state of the hardware such as battery life, memory usage, time of operation. `jobs` include asyncronous task, that the system performs at some point, like a reboot, and their state can be retrieved here."
    },
    {
      "name": "System",
      "description": "read, configure the cubes hardware. Add Wifis and reboot the cube."
    },
    {
      "name": "Users",
      "description": "Manage the users with acces to the cube."
    }
  ],
  "paths": {
    "/cube/state": {
      "get": {
        "tags": [
          "State"
        ],
        "summary": "get the current state of the cube.",
        "responses": {
          "200": {
            "description": "State found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CubeState"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"State\" is required."
          }
        }
      }
    },
    "/system/state": {
      "get": {
        "tags": [
          "State"
        ],
        "summary": "get the current state of the cube underlying system",
        "responses": {
          "200": {
            "description": "State found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemState"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"State\" is required."
          }
        }
      }
    },
    "/system/jobs/{job-id}": {
      "get": {
        "tags": [
          "State"
        ],
        "summary": "get a job. :D",
        "parameters": [
          {
            "name": "job-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returning job",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"State\" is required"
          },
          "404": {
            "description": "Not Found. invalid job-id"
          }
        }
      }
    },
    "/system/jobs/{job-id}/state": {
      "get": {
        "tags": [
          "State"
        ],
        "summary": "get the current state of a Job",
        "operationId": "getJobState",
        "parameters": [
          {
            "name": "job-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returning job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobState"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"State\" is required"
          },
          "404": {
            "description": "Not Found. invalid job-id"
          }
        }
      }
    },
    "/system/jobs": {
      "get": {
        "tags": [
          "State"
        ],
        "summary": "get the current state of the cube underlying system",
        "responses": {
          "200": {
            "description": "OK. Returning array of jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"State\" is required."
          }
        }
      }
    },
    "/events/{event-id}/handlers": {
      "get": {
        "tags": [
          "Handlers"
        ],
        "summary": "get all Handlers for {event-id}",
        "operationId": "getEventHandlers",
        "parameters": [
          {
            "name": "event-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/EventId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "items found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Handler"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Handlers is required."
          },
          "404": {
            "description": "Not Found. Invalid event-id"
          }
        }
      },
      "put": {
        "tags": [
          "Handlers"
        ],
        "summary": "set handler list for {event-id}",
        "operationId": "setEventHandlers",
        "parameters": [
          {
            "name": "event-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/EventId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Handler"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "items changed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Handler"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Handlers is required."
          },
          "404": {
            "description": "Not Found. Invalid event-id"
          }
        }
      },
      "post": {
        "tags": [
          "Handlers"
        ],
        "summary": "add a Handler for {event-id}",
        "operationId": "addEventHandler",
        "parameters": [
          {
            "name": "event-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/EventId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Handler"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Handler added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handler"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Handlers is required."
          },
          "404": {
            "description": " Not Found. Invalid event-id"
          }
        }
      },
      "delete": {
        "tags": [
          "Handlers"
        ],
        "summary": "delete all Handlers for {event-id}",
        "description": "Adds a Handler to a side",
        "operationId": "deleteEventHandlers",
        "parameters": [
          {
            "name": "event-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/EventId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "items deleted"
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"Handler\" is required."
          },
          "404": {
            "description": "Not Found. Invalid event-id"
          }
        }
      }
    },
    "/events/{event-id}/handlers/{handlerId}": {
      "get": {
        "tags": [
          "Handlers"
        ],
        "summary": "get the {handlerId}-th Handler for {event-id}",
        "operationId": "getEventHandler",
        "parameters": [
          {
            "name": "event-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/EventId"
            }
          },
          {
            "name": "handlerId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handler"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Handlers is required."
          },
          "404": {
            "description": "Handler Not Found. Invalid event-id or HandlerId"
          }
        }
      },
      "put": {
        "tags": [
          "Handlers"
        ],
        "summary": "set the {handlerId}-th Handler for {event-id}",
        "operationId": "setEventHandler",
        "parameters": [
          {
            "name": "event-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/EventId"
            }
          },
          {
            "name": "handlerId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Handler"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "item changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handler"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Handlers is required."
          },
          "404": {
            "description": "Handler Not Found. Invalid event-id or HandlerId"
          }
        }
      },
      "delete": {
        "tags": [
          "Handlers"
        ],
        "summary": "delete the {handlerId}-th Handler for {event-id}",
        "description": "Adds a Handler to a side",
        "operationId": "deleteEventHandler",
        "parameters": [
          {
            "name": "event-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/EventId"
            }
          },
          {
            "name": "handlerId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "item deleted"
          },
          "400": {
            "description": "Handler Not Found. Invalid event-id or HandlerId"
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"Handler\" is required."
          }
        }
      }
    },
    "/system/config": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "get the whole configuration as one json object.",
        "description": "d get the whole configuration as one file deploy it on any other cube to create an exact copy.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CubeConfig"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "System"
        ],
        "summary": "upload a whole preconfigured configuration to the cube.",
        "description": "Upload a whole preconfigured configuration to the cube. overriding ALL DATA, even username and password. use this to duplicate a key or to apply a data backup.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CubeConfig"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user-id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get a user",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "user-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Users is required."
          },
          "404": {
            "description": "Handler Not Found. Invalid user-id"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "change a user",
        "operationId": "putUser",
        "parameters": [
          {
            "name": "user-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "item updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Users is required."
          },
          "404": {
            "description": "Handler Not Found. Invalid user-id"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "delete a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "user-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "item deleted"
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Users is required."
          },
          "404": {
            "description": "Handler Not Found. Invalid user-id"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get a list of all user",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "items found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Users is required."
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "add a user",
        "operationId": "postUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "item updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission for Users is required."
          },
          "404": {
            "description": "Handler Not Found. Invalid user-id"
          }
        }
      }
    },
    "/system/config/accesspoint": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "get the Access Point configuration",
        "operationId": "getAccessPoint",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"System\" is required."
          }
        }
      },
      "put": {
        "tags": [
          "System"
        ],
        "summary": "set Access Point Configuration",
        "description": "returns current configuration if accepted",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Network"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission System is required.ig\""
          }
        }
      }
    },
    "/system/config/wifis": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "get list of configured wifis",
        "description": "returns wifi",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wifi"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "return configured wifi",
        "description": "returns current configuration if accepted",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wifi"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "item created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wifi"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission System is required.\""
          }
        }
      }
    },
    "/system/config/wifis/{wifi-id}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "get the wifi with id {wifi-id}",
        "operationId": "getWifi",
        "parameters": [
          {
            "name": "wifi-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK item"
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"System\" is required."
          },
          "404": {
            "description": "Wifi Not Found. Invalid wifi-id"
          }
        }
      },
      "delete": {
        "tags": [
          "System"
        ],
        "summary": "delete the wifi with id {wifi-id}",
        "operationId": "deleteWifi",
        "parameters": [
          {
            "name": "wifi-id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "item deleted"
          },
          "400": {
            "description": "Wifi Not Found. Invalid wifi-id"
          },
          "401": {
            "description": "Unauthorized. please login"
          },
          "403": {
            "description": "Forbidden. Permission \"System\" is required."
          }
        }
      }
    },
    "/system/reboot": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "schedules a reboot of the System",
        "description": "returns a reboot job object, with uri where the client can check if the reboot is completed. current configuration and then starts reboot.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reboot-in-sec": {
                    "type": "integer",
                    "description": "delay of reboot in seconds",
                    "example": 0,
                    "default": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "device reboots now",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "job": {
                      "$ref": "#/components/schemas/Job"
                    },
                    "systemConfig": {
                      "$ref": "#/components/schemas/SystemConfig"
                    }
                  }
                }
              }
            },
            "links": {
              "getRebootStatus": {
                "operationId": "getJobState",
                "parameters": {
                  "jobId": "$response.body#/job/id"
                },
                "description": "The id of the returned job can be used as the job-Id parameter in GET /system/jobs/{job-id}/state"
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please login"
          },
          "403": {
            "description": "Forbidden. Permission System is required."
          },
          "500": {
            "description": "unable to reboot."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Id": {
        "type": "string",
        "description": "Ids are always asigned by the system and therefore cannot be modified.",
        "readOnly": true,
        "example": "123"
      },
      "Ip": {
        "type": "string",
        "description": "an IPv4 or IPv6 IP address.",
        "example": "192.168.0.10",
        "oneOf": [
          {
            "format": "ipv4"
          },
          {
            "format": "ipv6"
          }
        ]
      },
      "EventId": {
        "type": "string",
        "description": "Each event that Smart-Cube can detect is identified by an EventId. Those are: <li> change is detected, when cube is tilted.</li>  <li> shaking is detected when the cube is shaken for *changedelay* seconds.</li> <li>*side-N* is detected when the N-th side is facing up</li>",
        "example": "change",
        "enum": [
          "side-1",
          "side-2",
          "side-3",
          "side-4",
          "side-5",
          "side-6",
          "change",
          "shaking"
        ]
      },
      "Password": {
        "type": "string",
        "description": "passwords are write only and never returned in a response",
        "format": "password",
        "writeOnly": true,
        "example": "pa$$word-swordfish"
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        },
        "description": "User of the system"
      },
      "CubeConfig": {
        "type": "object",
        "properties": {
          "wifis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wifi"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "event-handlers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "event-id": {
                  "$ref": "#/components/schemas/EventId"
                },
                "handler": {
                  "$ref": "#/components/schemas/Password"
                }
              }
            }
          }
        },
        "description": "The configuration of the system as a whole."
      },
      "CubeState": {
        "type": "object",
        "properties": {
          "active-event": {
            "$ref": "#/components/schemas/EventId"
          },
          "event-start-time": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-21T17:32:28Z"
          }
        },
        "description": "contains all sensor and event data.  *activeEvent* is the last event that was detected. *startOfEvent* is the timestamp when *activeEvent* started"
      },
      "SystemState": {
        "type": "object",
        "properties": {
          "battery-remaining-time": {
            "type": "integer",
            "description": "estimated remaining time of operation in seconds until devices runs out of power. -1 means infintely",
            "format": "int64",
            "example": 60
          },
          "battery-remaining-percentage": {
            "type": "integer",
            "description": "estimated percentage of the batteries remaining power.",
            "format": "int64",
            "example": 60
          },
          "last-reboot": {
            "type": "string",
            "description": "timestamp when device was switched on the last time.",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          },
          "last-charge": {
            "type": "string",
            "description": "timestamp when device was charged the last time.",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          },
          "ram": {
            "$ref": "#/components/schemas/StorageMetrics"
          },
          "flash": {
            "$ref": "#/components/schemas/StorageMetrics"
          },
          "network": {
            "$ref": "#/components/schemas/Network"
          }
        },
        "description": "information about the running hardware such memory and storage utilization, networking details, battery status"
      },
      "StorageMetrics": {
        "type": "object",
        "properties": {
          "free-kb": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "example": 13.1
          },
          "allocated-kb": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "example": 28.9
          },
          "total-kb": {
            "type": "number",
            "format": "float",
            "readOnly": true,
            "example": 42
          }
        },
        "description": "metrics of storage utilization in kb. can be RAM or flash storage."
      },
      "Network": {
        "type": "object",
        "properties": {
          "wifi": {
            "$ref": "#/components/schemas/Wifi"
          },
          "ip-address": {
            "$ref": "#/components/schemas/Ip"
          },
          "network-mask": {
            "$ref": "#/components/schemas/Ip"
          },
          "gateway": {
            "$ref": "#/components/schemas/Ip"
          },
          "dns": {
            "$ref": "#/components/schemas/Ip"
          }
        },
        "description": "describes a network setup including wifi and SSID to connect to Ip address, etc"
      },
      "SystemConfig": {
        "properties": {
          "wifi-mode": {
            "type": "string",
            "description": "*accesspoint* forces the cube to always start in accesspoint mode. *dynamic mode* enables cube connecting to a known network from /system/config/wifi, it will launch an accesspoint, if no network is found or if the cube is woken into config mode, which happens when shaken for 5 seconds.",
            "example": "accesspoint",
            "default": "dynamic",
            "enum": [
              "accesspoint",
              "dynamic"
            ]
          },
          "change-delay": {
            "type": "integer",
            "description": "when the cube is tilted, sensors indicate several CubeState changes. To mittigate the detection of those unwanted events the cube must stand still for *changeDelay* milliseconds before a the new state will be detected",
            "example": 3000,
            "default": 3000
          }
        },
        "description": "provides all relevant and irrelevant meta data about the hardware"
      },
      "Wifi": {
        "required": [
          "id",
          "ssid"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "ssid": {
            "type": "string",
            "description": "the SSID of the Wifi to connect to",
            "example": "Fsociety-SSID"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          },
          "prefered-ip-address": {
            "$ref": "#/components/schemas/Ip"
          }
        },
        "description": "ssid and IP of networks known to the cube. The password can be set but not retrieved. if IP address is not set or not available, Smart-Cube will get one assigned by the networks DHCP server."
      },
      "Handler": {
        "required": [
          "id",
          "request"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "1"
          },
          "request": {
            "$ref": "#/components/schemas/HttpRequest"
          },
          "expected-response-code": {
            "type": "integer",
            "description": "if not set, any http response code <400 is considered as success.",
            "example": 201
          }
        },
        "description": "configures a HttpRequest and the expected response from that request."
      },
      "HttpRequest": {
        "required": [
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri",
            "example": "http://my-remote-service.com/webhook-to-trigger"
          },
          "method": {
            "type": "string",
            "example": "POST",
            "default": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "HEAD",
              "PATCH",
              "OPTIONS"
            ]
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "Authorization": "Basic NzQwYzefIzZjhjYTEwMadadasd",
              "accept": "application/json"
            }
          },
          "payload": {
            "type": "string",
            "example": "sample body as string"
          }
        }
      },
      "JobState": {
        "type": "string",
        "readOnly": true,
        "default": "SCHEDULED",
        "enum": [
          "SCHEDULED",
          "STARTED",
          "SUCCEEDED",
          "ABORTED",
          "FAILED"
        ]
      },
      "Job": {
        "required": [
          "id",
          "scheduledTime",
          "state",
          "uri"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "uri": {
            "type": "string",
            "description": "the callback URI where to check for task completion",
            "format": "uri",
            "readOnly": true,
            "example": "/api/v1/job/123/state"
          },
          "state": {
            "$ref": "#/components/schemas/JobState"
          },
          "scheduled-time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          },
          "start-time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          },
          "end-time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}