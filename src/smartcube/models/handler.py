# coding: utf-8
import logging
import ujson as json
from urequests import request


from smartcube.models.base_model_ import Model
from smartcube.models.http_request import HttpRequest  # noqa: F401,E501
from smartcube import util

log = logging.getLogger(__name__)


class Handler(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self, request: HttpRequest = None, expected_response: int = 200
    ):  # noqa: E501
        """Handler - a model defined in Swagger

        :param request: The request of this Handler.  # noqa: E501
        :type request: HttpRequest
        :param expected_response: The expected_response of this Handler.  # noqa: E501
        :type expected_response: int
        """
        self.swagger_types = {"request": HttpRequest, "expected_response": int}

        self.attribute_map = {
            "request": "request",
            "expected_response": "expectedResponse",
        }
        self._request = request
        self._expected_response = expected_response

    @classmethod
    def from_dict(cls, dikt) -> "Handler":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Handler of this Handler.  # noqa: E501
        :rtype: Handler
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request(self) -> HttpRequest:
        """Gets the request of this Handler.


        :return: The request of this Handler.
        :rtype: HttpRequest
        """
        return self._request

    @request.setter
    def request(self, request: HttpRequest):
        """Sets the request of this Handler.


        :param request: The request of this Handler.
        :type request: HttpRequest
        """
        if request is None:
            raise ValueError(
                "Invalid value for `request`, must not be `None`"
            )  # noqa: E501

        self._request = request

    @property
    def expected_response(self) -> int:
        """Gets the expected_response of this Handler.


        :return: The expected_response of this Handler.
        :rtype: int
        """
        return self._expected_response

    @expected_response.setter
    def expected_response(self, expected_response: int):
        """Sets the expected_response of this Handler.


        :param expected_response: The expected_response of this Handler.
        :type expected_response: int
        """

        self._expected_response = expected_response

    def run(self) -> bool:
        log.info("runing http request handler: {}".format(self._request.__dict__))
        r = self._request
        response = request(method=r.method, url=r.uri, json=r.json, headers=r.headers)

        try:
            assert response.status_code == self._expected_response
            log.info(
                "Handler ran succesfully. Response was {}".format(
                    response.__dict__
                )
            )
        except AssertionError:
            log.error(
                "http request %s returned %i, but expected %i",
                r.uri,
                response.status_code,
                self._expected_response,
            )
    
    @classmethod
    def from_config(cls, id: str):
        """load handler from a file of handlers.

        Args:
            id (str): identifier of the handler within the json file

        Returns:
            Handler: [description]
        """
        try:
            with open("/handlers.json", "r") as f:
                handler_dict = json.load(f)["side_{}".format(id)]
        except OSError as e:
            log.error("handlers.json not found. no handler triggered")
            raise e
        except KeyError as e:
            log.error("no handler configured for side {}".format(id))
            raise e

        return cls.from_dict(handler_dict)
